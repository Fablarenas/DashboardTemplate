#pragma checksum "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\TimeOuts\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "80ca4a066a947d5092ee2ff477431f87a5ca89ed"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TimeOuts_Index), @"mvc.1.0.view", @"/Views/TimeOuts/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\_ViewImports.cshtml"
using TestingAppQa;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\_ViewImports.cshtml"
using TestingAppQa.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\_ViewImports.cshtml"
using TestingAppQa.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"80ca4a066a947d5092ee2ff477431f87a5ca89ed", @"/Views/TimeOuts/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9236b2083388687c613f927809694d90881139b1", @"/Views/_ViewImports.cshtml")]
    public class Views_TimeOuts_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<TestingAppQa.Models.TimeOut>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral(@"<div class=""content"">
    <div class=""d-flex justify-content-between"">
        <!-- Animated -->
        <h3 class=""text-secondary"">Tiempos De Salida</h3>
    </div>


    <!-- Header-->
    <!-- /#header -->
    <!-- Content -->
    <div class=""content"">
        <!-- Animated -->
        <div class=""animated fadeIn"">
            <!-- Widgets  -->
            <!-- /To Do and Live Chat -->
            <!-- Calender Chart Weather  -->
            <div class=""row"">
                <div class=""col-md-12 col-lg-4"">
                    <div class=""card"">
                        <div class=""card-body"">
                            <!-- <h4 class=""box-title"">Chandler</h4> -->
                            <div class=""calender-cont widget-calender"">
                                <div id=""calendar""></div>
                            </div>
                        </div>
                    </div><!-- /.card -->
                </div>
            </div>

            <div class=""modal fade non");
            WriteLiteral(@"e-border"" id=""event-modal"">
                <div class=""modal-dialog"">
                    <div class=""modal-content"">
                        <div class=""modal-header"">
                            <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
                            <h4 class=""modal-title""><strong>Add New Event</strong></h4>
                        </div>
                        <div class=""modal-body""></div>
                        <div class=""modal-footer"">
                            <button type=""button"" class=""btn btn-default waves-effect"" data-dismiss=""modal"">Close</button>
                            <button type=""button"" class=""btn btn-success save-event waves-effect waves-light"">Crear Tiempo de salida</button>
                            <button type=""button"" class=""btn btn-danger delete-event waves-effect waves-light"" data-dismiss=""modal"">Delete</button>
                        </div>
                    </div>
                </div>");
            WriteLiteral(@"
            </div>
            <!-- /Calender Chart Weather -->
            <!-- Modal - Calendar - Add New Event -->
            <!-- /#event-modal -->
            <!-- Modal - Calendar - Add Category -->
            <!-- /#add-category -->
        </div>
        <!-- .animated -->
    </div>
    <!-- /.content -->
    <div class=""clearfix""></div>
    <!-- Footer -->
    <!-- /.site-footer -->
</div>
");
            DefineSection("scripts", async() => {
                WriteLiteral(@"

    <script>
!function($) {
    ""use strict"";

    var CalendarApp = function() {
        this.$body = $(""body"")
        this.$modal = $('#event-modal'),
        this.$event = ('#external-events div.external-event'),
        this.$calendar = $('#calendar'),
        this.$saveCategoryBtn = $('.save-category'),
        this.$categoryForm = $('#add-category form'),
        this.$extEvents = $('#external-events'),
        this.$calendarObj = null
    };
    /* on drop */
    CalendarApp.prototype.onDrop = function (eventObj, date) {
        console.log(""Entre y guardo 1"")
        var $this = this;
            // retrieve the dropped element's stored Event Object
            var originalEventObject = eventObj.data('eventObject');
            var $categoryClass = eventObj.attr('data-class');
            // we need to copy it, so that multiple events don't have a reference to the same object
            var copiedEventObject = $.extend({}, originalEventObject);
            // assign it the");
                WriteLiteral(@" date that was reported
            copiedEventObject.start = date;
            if ($categoryClass)
                copiedEventObject['className'] = [$categoryClass];
            // render the event on the calendar
            $this.$calendar.fullCalendar('renderEvent', copiedEventObject, true);
            // is the ""remove after drop"" checkbox checked?
            if ($('#drop-remove').is(':checked')) {
                // if so, remove the element from the ""Draggable Events"" list
                eventObj.remove();
            }
    },
    /* on click on event */
        CalendarApp.prototype.onEventClick = function (calEvent, jsEvent, view) {
        console.log(""Entre y guardo2"")
        var $this = this;
            var form = $(""<form></form>"");
            form.append(""<label>Change event name</label>"");
            form.append(""<div class='input-group'><input class='form-control' type=text value='"" + calEvent.title + ""' /><span class='input-group-btn'><button type='submit' class='btn ");
                WriteLiteral(@"btn-success waves-effect waves-light'><i class='fa fa-check'></i> Save</button></span></div>"");
            $this.$modal.modal({
                backdrop: 'static'
            });
            $this.$modal.find('.delete-event').show().end().find('.save-event').hide().end().find('.modal-body').empty().prepend(form).end().find('.delete-event').unbind('click').click(function () {
                $this.$calendarObj.fullCalendar('removeEvents', function (ev) {
                    console.log(""Entre y guardo 3"")
                    return (ev._id == calEvent._id);
                });
                $this.$modal.modal('hide');
            });
        $this.$modal.find('form').on('submit', function () {
            console.log(""Entre y guardo 4"")
                calEvent.title = form.find(""input[type=text]"").val();
                $this.$calendarObj.fullCalendar('updateEvent', calEvent);
                $this.$modal.modal('hide');
                return false;
            });
    },
    /* on selec");
                WriteLiteral(@"t */
        CalendarApp.prototype.onSelect = function (start, end, allDay) {

        var $this = this;
            $this.$modal.modal({
                backdrop: 'static'
            });
            var form = $(""<form></form>"");
            form.append(""<div class='row'></div>"");
            form.find("".row"")
                .append(""<div class='col-md-6'><div class='form-group'><label class='control-label'>Event Name</label><input class='form-control' placeholder='Insert Event Name' type='text' name='title'/></div></div>"")
                .append(""<div class='col-md-6'><div class='form-group'><label class='control-label'>Category</label><select class='form-control' name='category'></select></div></div>"")
                .find(""select[name='category']"")
                .append(""<option value='bg-danger'>Danger</option>"")
                .append(""<option value='bg-success'>Success</option>"")
                .append(""<option value='bg-dark'>Dark</option>"")
                .append(""<option val");
                WriteLiteral(@"ue='bg-primary'>Primary</option>"")
                .append(""<option value='bg-pink'>Pink</option>"")
                .append(""<option value='bg-info'>Info</option>"")
                .append(""<option value='bg-warning'>Warning</option></div></div>"");
            $this.$modal.find('.delete-event').hide().end().find('.save-event').show().end().find('.modal-body').empty().prepend(form).end().find('.save-event').unbind('click').click(function () {
                form.submit();
            });
        $this.$modal.find('form').on('submit', function () {

                var title = form.find(""input[name='title']"").val();
                var beginning = form.find(""input[name='beginning']"").val();
                var ending = form.find(""input[name='ending']"").val();
                var categoryClass = form.find(""select[name='category'] option:checked"").val();
                if (title !== null && title.length != 0) {
                    $this.$calendarObj.fullCalendar('renderEvent', {
                 ");
                WriteLiteral(@"       title: title,
                        start:start,
                        end: end,
                        allDay: false,
                        className: categoryClass
                    }, true);
                    $this.$modal.modal('hide');
                }
                else{
                    alert('You have to give a title to your event');
            }

            $.post(""");
#nullable restore
#line 166 "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\TimeOuts\Index.cshtml"
               Write(Url.Action("Create", "TimeOuts"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?Name="" + title + ""&StartDate="" + start._d.toLocaleDateString() + ""&EndDate="" + end._d.toLocaleDateString(),function(re){

         //redirect now

     });
                return false;

            });
        $this.$calendarObj.fullCalendar('unselect');
    },
        CalendarApp.prototype.enableDrag = function () {
        console.log(""Entre y guardo 7"")
        //init events
        $(this.$event).each(function () {
            console.log(""Entre y guardo 8"")
            // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
            // it doesn't need to have a start or end
            var eventObject = {
                title: $.trim($(this).text()) // use the element's text as the event title
            };
            // store the Event Object in the DOM element so we can get to it later
            $(this).data('eventObject', eventObject);
            // make the event draggable using jQuery UI
            $(this).draggable({
             ");
                WriteLiteral(@"   zIndex: 999,
                revert: true,      // will cause the event to go back to its
                revertDuration: 0  //  original position after the drag
            });
        });
    }
    /* Initializing */
    CalendarApp.prototype.init = function () {
        console.log(""Entre y guardo 9"")
        this.enableDrag();
        /*  Initialize the calendar  */
        var date = new Date();
        var d = date.getDate();
        var m = date.getMonth();
        var y = date.getFullYear();
        var form = '';
        var today = new Date($.now());
");
                WriteLiteral("        var $this = this;\r\n        const claus = [\"bg-dark\", \"bg-danger\", \"bg-primary\"];\r\n        var data = $.get(\"");
#nullable restore
#line 214 "C:\Users\FabianArenas\source\repos\TestingAppQa\TestingAppQa\Views\TimeOuts\Index.cshtml"
                     Write(Url.Action("getData", "TimeOuts"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""", function (data, status) {
            var datameets = data.map((x) => {
                return { title: x.name, start: new Date(x.startDate), end: new Date(x.endDate), className: claus[Math.floor(Math.random() * claus.length)] }
            })
            console.log(datameets);
            $this.$calendarObj = $this.$calendar.fullCalendar({
                slotDuration: '00:15:00', /* If we want to split day time each 15minutes */
                minTime: '08:00:00',
                maxTime: '19:00:00',
                defaultView: 'month',
                handleWindowResize: true,
                height: $(window).height() - 200,
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                events: datameets,
                editable: true,
                droppable: true, // this allows things to be dropped onto the calendar !!!
                even");
                WriteLiteral(@"tLimit: true, // allow ""more"" link when too many events
                selectable: true,
                drop: function (date) { $this.onDrop($(this), date); },
                select: function (start, end, allDay) { $this.onSelect(start, end, allDay); },
                eventClick: function (calEvent, jsEvent, view) { $this.onEventClick(calEvent, jsEvent, view); }

            });
        });




        //on new event
        this.$saveCategoryBtn.on('click', function () {
            console.log(""Entre y guardo 10"")
            var categoryName = $this.$categoryForm.find(""input[name='category-name']"").val();
            var categoryColor = $this.$categoryForm.find(""select[name='category-color']"").val();
            if (categoryName !== null && categoryName.length != 0) {
                $this.$extEvents.append('<div class=""external-event bg-' + categoryColor + '"" data-class=""bg-' + categoryColor + '"" style=""position: relative;""><i class=""fa fa-move""></i>' + categoryName + '</div>')
    ");
                WriteLiteral(@"            $this.enableDrag();
            }

        });
    },

   //init CalendarApp
    $.CalendarApp = new CalendarApp, $.CalendarApp.Constructor = CalendarApp

}(window.jQuery),

//initializing CalendarApp
function($) {
    ""use strict"";
    $.CalendarApp.init()
            }(window.jQuery);

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<TestingAppQa.Models.TimeOut>> Html { get; private set; }
    }
}
#pragma warning restore 1591
